<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>emacs on 思泉笔谈 | AI-Life</title>
    <link>https://lvsq.net/categories/emacs/</link>
    <description>Recent content in emacs on 思泉笔谈 | AI-Life</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 29 Dec 2021 16:55:08 +0800</lastBuildDate>
    
        <atom:link href="https://lvsq.net/categories/emacs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Doom Emacs Golang 环境配置</title>
      <link>https://lvsq.net/2021/12/doom-emacs-golang-env/</link>
      <pubDate>Wed, 29 Dec 2021 16:55:08 +0800</pubDate>
      
      <guid>https://lvsq.net/2021/12/doom-emacs-golang-env/</guid>
      <description>Doom Emacs是一个Emacs的一个配置集合，可看做CentOS和Linux的关系。它将Emcas和Vim相结合，包含了各自的种种优点，并减少</description>
    </item>
    
    <item>
      <title>不到60行代码，用Racket实现wc命令</title>
      <link>https://lvsq.net/2021/08/racket-wc/</link>
      <pubDate>Mon, 09 Aug 2021 14:31:04 +0800</pubDate>
      
      <guid>https://lvsq.net/2021/08/racket-wc/</guid>
      <description>Racket语言开发命令行程序十分简单，而且支持跨平台编译，我们可以用它来开发各种方便的工具程序。下面实现了一个完整的wc程序，只需50多行</description>
    </item>
    
    <item>
      <title>改进Racket的time函数</title>
      <link>https://lvsq.net/2021/07/racket-time-improvement/</link>
      <pubDate>Thu, 22 Jul 2021 11:34:29 +0800</pubDate>
      
      <guid>https://lvsq.net/2021/07/racket-time-improvement/</guid>
      <description>Racket和Chez Scheme一样都有time函数，用来打印函数的执行时间，所不同的地方在于，Chez Scheme的time函数会把分配</description>
    </item>
    
    <item>
      <title>Racket 并发与同步</title>
      <link>https://lvsq.net/2021/07/racket-concurrency/</link>
      <pubDate>Thu, 08 Jul 2021 13:47:13 +0800</pubDate>
      
      <guid>https://lvsq.net/2021/07/racket-concurrency/</guid>
      <description>Threads 创建一个新线程： (thread (lambda() (displayln &amp;#34;This is a new thread&amp;#34;))) 休眠线程并且杀掉: (define worker (thread (lambda () (let loop () (displayln &amp;#34;Working...&amp;#34;) (sleep 0.2) (loop))))) (sleep 2.5) (kill-thread worker) 如果主线程退出或者被杀掉，其子线程也面临着退出, 可以利</description>
    </item>
    
    <item>
      <title>Racket Modules</title>
      <link>https://lvsq.net/2021/07/racket-modules/</link>
      <pubDate>Thu, 08 Jul 2021 11:00:25 +0800</pubDate>
      
      <guid>https://lvsq.net/2021/07/racket-modules/</guid>
      <description>模块基础 一个模块可以被另一个模块使用，但是模块内部的变量不能直接修改，即set! 通常，每个Racket模块驻留在自己的文件中，换句话说，可以</description>
    </item>
    
    <item>
      <title>【盛最多水的容器】问题的求解</title>
      <link>https://lvsq.net/2021/05/container-with-most-water/</link>
      <pubDate>Tue, 11 May 2021 18:09:35 +0800</pubDate>
      
      <guid>https://lvsq.net/2021/05/container-with-most-water/</guid>
      <description>这是一个leet code出现的问题: 给 n 个非负整数 $a_1$，$a_2$，&amp;hellip;，$a_n$，每个数代表坐标中的一个点(i, $a_i$) 。在</description>
    </item>
    
    <item>
      <title>对大脑而言，阅读计算机代码与阅读语言不同</title>
      <link>https://lvsq.net/2020/12/brain-reading-computer-code/</link>
      <pubDate>Wed, 16 Dec 2020 09:05:44 +0800</pubDate>
      
      <guid>https://lvsq.net/2020/12/brain-reading-computer-code/</guid>
      <description>神经科学家发现，解释代码可以激活通用的大脑网络，但不能激活语言处理中心。 安妮·特拉夫顿 | 麻省理工学院新闻办公室 发布日期：2020年12月15</description>
    </item>
    
    <item>
      <title>基于Chez Scheme重建Racket</title>
      <link>https://lvsq.net/2020/10/rebuilding-racket/</link>
      <pubDate>Tue, 20 Oct 2020 10:49:13 +0800</pubDate>
      
      <guid>https://lvsq.net/2020/10/rebuilding-racket/</guid>
      <description>作者 MATTHEW FLATT, University of Utah,USACANER DERICI, Indiana University, USAR. KENT DYBVIG, Cisco Systems, Inc., USAANDREW W. KEEP, Cisco Systems, Inc., USAGUSTAVO E. MASSACCESI, Universidad de Buenos Aires, ArgentinaSARAH SPALL, Indiana University, USASAM TOBIN-HOCHSTADT, Indiana University, USAJON ZEPPIERI, independent researcher, USA 概要 我们在Chez Scheme上重建了Racket，并且</description>
    </item>
    
    <item>
      <title>Lexical Scoping and Dynamic Scoping</title>
      <link>https://lvsq.net/2020/09/lexical-dynamic-scoping/</link>
      <pubDate>Wed, 23 Sep 2020 11:24:24 +0800</pubDate>
      
      <guid>https://lvsq.net/2020/09/lexical-dynamic-scoping/</guid>
      <description>我相信每一位程序员在学习或者实践编程时，都会遇到作用域的问题。您可能觉得作用域很简单，甚至都不能当做一个问题来看待，我想原因可能是目前主流的</description>
    </item>
    
    <item>
      <title>快速排序（Lisp版本）</title>
      <link>https://lvsq.net/2020/07/quick-sort-in-cl/</link>
      <pubDate>Mon, 20 Jul 2020 14:57:29 +0800</pubDate>
      
      <guid>https://lvsq.net/2020/07/quick-sort-in-cl/</guid>
      <description>快速排序是一种常见的排序手段，由C.A.R.Hoare在1960年提出。其基本思路为： 设定一个分界值，通常为第一个元素； 遍历列表，将所有小于</description>
    </item>
    
    <item>
      <title>从“八皇后”到amb</title>
      <link>https://lvsq.net/2020/05/n-queens/</link>
      <pubDate>Sat, 23 May 2020 15:41:35 +0800</pubDate>
      
      <guid>https://lvsq.net/2020/05/n-queens/</guid>
      <description>讲故事并不是我擅长的事情，不过事情总有一个开始，诸位看官莫嫌我絮烦，只是希望可以讲述的更有条理一些。某日正读一本关于Erlang的书，书中出</description>
    </item>
    
    <item>
      <title>[译]BEAM vs JVM</title>
      <link>https://lvsq.net/2020/05/beam-vs-jvm/</link>
      <pubDate>Thu, 14 May 2020 10:13:25 +0800</pubDate>
      
      <guid>https://lvsq.net/2020/05/beam-vs-jvm/</guid>
      <description>作者是 Francesco Cesarini &amp;amp; Gabor Olah 任何编程语言在Erlang生态系统中的成功都可以分为三个紧密耦合的组件。它们是：1）Erlang编程语言的语义，并在其上实现</description>
    </item>
    
    <item>
      <title>无重复字符的最长子串-Scheme实现</title>
      <link>https://lvsq.net/2020/03/longest-substr/</link>
      <pubDate>Thu, 12 Mar 2020 18:02:45 +0800</pubDate>
      
      <guid>https://lvsq.net/2020/03/longest-substr/</guid>
      <description>实现 下面将使用Scheme语言来实现“无重复字符的最长子串”，即，对于字符串&amp;quot;abbabcx&amp;quot;,其最长无重复字符的子串为</description>
    </item>
    
    <item>
      <title>使用Golang进行函数式编程</title>
      <link>https://lvsq.net/2020/03/fp-in-go/</link>
      <pubDate>Thu, 12 Mar 2020 10:38:55 +0800</pubDate>
      
      <guid>https://lvsq.net/2020/03/fp-in-go/</guid>
      <description>为什么要用Go练习函数式编程？简而言之，正是由于缺少状态和可变数据，函数式编程使您的代码更易读，更易于测试且不太复杂。如果遇到错误，只要不违</description>
    </item>
    
    <item>
      <title>Scheme实现一个FIFO队列</title>
      <link>https://lvsq.net/2020/03/fifo-queue/</link>
      <pubDate>Fri, 06 Mar 2020 17:35:49 +0800</pubDate>
      
      <guid>https://lvsq.net/2020/03/fifo-queue/</guid>
      <description>闲来无事，用Scheme实现一个FIFO队列，数据从末端插入，从前端删除或者查询。 队列可以看成是由下面一组操作定义的结构： 构造函数 (make</description>
    </item>
    
    <item>
      <title>兼容性（Compatibility Features in Chez Scheme）</title>
      <link>https://lvsq.net/2020/02/compatibility/</link>
      <pubDate>Tue, 18 Feb 2020 14:23:39 +0800</pubDate>
      
      <guid>https://lvsq.net/2020/02/compatibility/</guid>
      <description>本章介绍了当前版本的Chez Scheme中包含的几个项目，主要是为了与系统的较早版本兼容。由于兼容功能可能在未来会被放弃，所以新项目中应尽可</description>
    </item>
    
    <item>
      <title>线程（Thread System in Chez Scheme）</title>
      <link>https://lvsq.net/2020/02/thread/</link>
      <pubDate>Mon, 17 Feb 2020 15:18:39 +0800</pubDate>
      
      <guid>https://lvsq.net/2020/02/thread/</guid>
      <description>下面介绍Chez Scheme线程系统过程和语法形式。 除了锁，锁增量和锁减量之外，线程系统的功能在非基于Windows的系统上在Posix线程</description>
    </item>
    
    <item>
      <title>存储管理(Storage Management in Chez Scheme)</title>
      <link>https://lvsq.net/2020/02/storage-management/</link>
      <pubDate>Wed, 12 Feb 2020 16:18:53 +0800</pubDate>
      
      <guid>https://lvsq.net/2020/02/storage-management/</guid>
      <description>垃圾回收 Scheme程序不会显式地释放诸如序对，字符串和过程之类的Scheme对象。 相反，一旦存储管理系统证明不再可以访问该对象，它就会自动</description>
    </item>
    
    <item>
      <title>系统操作(System Operations in Chez Scheme)</title>
      <link>https://lvsq.net/2020/02/system-operations/</link>
      <pubDate>Thu, 06 Feb 2020 10:54:14 +0800</pubDate>
      
      <guid>https://lvsq.net/2020/02/system-operations/</guid>
      <description>异常 (warning who msg irritant &amp;hellip;) 返回：未指定 警告会引发条件类型＆warning的持续异常，并应用于描述＆warning条件类型适用的情况，通常是一种不应该阻止</description>
    </item>
    
    <item>
      <title>Scheme语法define-record-type介绍</title>
      <link>https://lvsq.net/2020/02/define-record-type/</link>
      <pubDate>Mon, 03 Feb 2020 14:51:17 +0800</pubDate>
      
      <guid>https://lvsq.net/2020/02/define-record-type/</guid>
      <description>define-record-type Scheme语言中的define-record-type形式用来定义一个记录类型，并定义该类型的构造函数、仅对该类型的record返回tr</description>
    </item>
    
  </channel>
</rss>
