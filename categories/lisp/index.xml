<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Lisp on 思泉笔谈 | AI-Life</title>
    <link>https://continuation.cn/categories/lisp/</link>
    <description>Recent content in Lisp on 思泉笔谈 | AI-Life</description>
    <generator>Hugo -- 0.148.2</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 11 May 2021 18:09:35 +0800</lastBuildDate>
    <atom:link href="https://continuation.cn/categories/lisp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【盛最多水的容器】问题的求解</title>
      <link>https://continuation.cn/2021/05/container-with-most-water/</link>
      <pubDate>Tue, 11 May 2021 18:09:35 +0800</pubDate>
      <guid>https://continuation.cn/2021/05/container-with-most-water/</guid>
      <description>&lt;p&gt;这是一个leet code出现的问题:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给 n 个非负整数 $a_1$，$a_2$，&amp;hellip;，$a_n$，每个数代表坐标中的一个点(i, $a_i$) 。在坐标内画 n 条垂直线，垂直线 i的两个端点分别为(i, $a_i$) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lexical Scoping and Dynamic Scoping</title>
      <link>https://continuation.cn/2020/09/lexical-dynamic-scoping/</link>
      <pubDate>Wed, 23 Sep 2020 11:24:24 +0800</pubDate>
      <guid>https://continuation.cn/2020/09/lexical-dynamic-scoping/</guid>
      <description>&lt;p&gt;我相信每一位程序员在学习或者实践编程时，都会遇到作用域的问题。您可能觉得作用域很简单，甚至都不能当做一个问题来看待，我想原因可能是目前主流的计算机语言Java, Python, C等等几乎一致采用Lexical Scoping,程序员没有机会察觉到异样，从而掩盖了还有其他作用域的事实，许多教科书也很配合地一笔带过，当然还有一种可能是您已经洞察了不同作用域的差异和内涵，自觉地规避了问题。我衷心的希望所有程序员都是第二种可能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>快速排序（Lisp版本）</title>
      <link>https://continuation.cn/2020/07/quick-sort-in-cl/</link>
      <pubDate>Mon, 20 Jul 2020 14:57:29 +0800</pubDate>
      <guid>https://continuation.cn/2020/07/quick-sort-in-cl/</guid>
      <description>&lt;p&gt;快速排序是一种常见的排序手段，由C.A.R.Hoare在1960年提出。其基本思路为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;设定一个分界值，通常为第一个元素；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;遍历列表，将所有小于分界值的元素集中到列表的左侧，所有大于或等于分界值的元素集中到右侧；&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
